using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

using System.Web;
using System.Net;
using System.IO;
using System.Configuration;

using Newtonsoft.Json;

namespace Lexicum.ZzishApiClient
{
    public class ZzishApiSession
    {

        String appId = ConfigurationManager.AppSettings["ZzishAppId"];

        String apiUrl = "http://api.zzish.com/";

        String deviceId = "test-device";
        String userId = "1114";
        String sessionId = (new Random()).Next().ToString();
        Guid activityId;

        public Guid ActivityId
        {
            get { return activityId; }
        }


        public ZzishApiSession() { }
        public ZzishApiSession(String aUserId) {
            userId = aUserId;
        }
        public ZzishApiSession(String aDeviceId, String aUserId, String aSessionId = "")
        {
            deviceId = aDeviceId;
            userId = aUserId;
            if (aSessionId != String.Empty) sessionId = aSessionId;
        }

        /// <summary>
        /// Registers a student without assigning them to a classroom. Call before starting a new student's first activity.
        /// </summary>
        /// <param name="name">Name of the user</param>
        /// <param name="aUserId">The user's ID from your own app</param>
        /// <returns>Status code - 200 if all is OK</returns>
        public Int32 RegisterUser(String name, String aUserId)
        {
            userId = aUserId;
            var obj = apiCall("profiles", "{\"uuid\":\"" + userId + "\", \"name\":\"" + name + "\"}");

            return obj.status;
        }
        /// <summary>
        /// Debug version: Register a student (without assigning to classroom). Uses hardcoded test user ID
        /// </summary>
        /// <param name="name">Student name from own app</param>
        /// <returns>The whole object returned by the Zzish API call</returns>
        public String RegisterUserDebug(String name)
        {
            String debug;
            var obj = apiCall("profiles", "{\"uuid\":\"" + userId + "\", \"name\":\"" + name + "\"}", out debug);

            return debug;
        }

        /// <summary>
        /// Register an activity i.e. a sequence of actions. This needs to be called before registering specific actions.
        /// For instance, the activity might be a quiz and each action is a questions from the quiz having been answered.
        /// </summary>
        /// <param name="name">Activity name</param>
        /// <param name="groupCode">Clasroom code</param>
        /// <returns>Activity ID generated by the .NET SDK, not by the Zzish API</returns>
        public Guid RegisterActivity(String name, String groupCode)
        {
            String debug;
            // Here is how we generate the activity ID
            activityId = Guid.NewGuid();

            var activity = new
            {
                actor = new
                {
                    account = new
                    {
                        homePage = "http://www.zzish.com/" + appId,
                        name = userId
                    }
                },
                objectXX = new { definition = new { type = name } },
                verb = new { id = "http://activitystrea.ms/schema/1.0/start" },
                id = activityId,
                context = new
                {
                    extensions = new
                    {
                        XXXgroupCode = groupCode,
                        XXXdeviceId = deviceId,
                        XXXsessionId = sessionId,
                    }
                }
            };
            String json = JsonConvert.SerializeObject(activity);
            json = json.Replace("objectXX", "object");
            json = json.Replace("XXX", "http://www.zzish.com/context/extension/");
            var obj = apiCall("statements", json, out debug);

            return activityId;
        }

        /// <summary>
        /// Debug version: Register an activity i.e. a sequence of actions. This needs to be called before registering specific actions.
        /// </summary>
        /// <param name="name">Activity name</param>
        /// <param name="groupCode">Classroom code</param>
        /// <returns>The whole object returned by the API call</returns>
        public String RegisterActivityDebug(String name, String groupCode)
        {
            String debug;
            activityId = Guid.NewGuid();

            var activity = new
            {
                actor = new {
                    account = new {
                        homePage = "http://www.zzish.com/" + appId,
                        name = userId},
                    name= "Ilia Cvetkov"},
                objectXX = new { definition = new {type = name}},
                verb = new {id = "http://activitystrea.ms/schema/1.0/start"},
                id = activityId,
                context = new { extensions = new {
                    XXXgroupCode = groupCode,
                    XXXdeviceId = deviceId,
                    XXXsessionId = sessionId,
                }}
            };
            String json = JsonConvert.SerializeObject(activity);
            json = json.Replace("objectXX", "object");
            json = json.Replace("XXX", "http://www.zzish.com/context/extension/");
            var obj = apiCall("statements", json, out debug);

            return debug;
        }

        /// <summary>
        /// Register a specific student action i.e. an exam question having been answered
        /// </summary>
        /// <param name="aActivity">Reference to the activity (that's returned by RegisterActivity)</param>
        /// <param name="aName">Name of action</param>
        /// <param name="aScore">Score i.e. number of points awarded</param>
        /// <param name="aValue">Value - the specific answer</param>
        /// <returns>The whole object returned</returns>
        public String RegisterAction(Guid aActivity, String aName, String aScore, String aValue)
        {
            String debug;

            var action = new
            {
                actor = new { account = new {
                    homePage = "http://www.zzish.com/" + appId,
                    name = userId
                } },
                verb = new { id = "http://activitystrea.ms/schema/1.0/start" },
                objectXX = new { definition = new { } },
                id = aActivity,
                context = new
                {
                    extensions = new
                    {
                        XXXdeviceId = deviceId,
                        XXXsessionId = sessionId,
                    }
                },
                actions = new Object[] { new {
                    definition = new {type = aName},
                    response = aValue,
                    score = aScore,
                    correct = 1,
                    duration = 0,
                    attempts = 0
                }}
            };
            String json = JsonConvert.SerializeObject(action);
            json = json.Replace("objectXX", "object");
            json = json.Replace("XXX", "http://www.zzish.com/context/extension/");
            var obj = apiCall("statements", json, out debug);

            return debug;
        }

        // facilitates the non-debug version of the API call
        private dynamic apiCall(String path, String postData = "{}")
        {
            String ignoreDebug;
            return apiCall(path, postData, out ignoreDebug);
        }

        // places the actual call to the Zzish API
        private dynamic apiCall(String path, String postData, out String debug)
        {
            if (String.IsNullOrEmpty(appId))
                throw new ApplicationException(@"You haven't provided a Zzish App ID in your application's config file. Please obtain the same from http://zzish.com and add it in order to be able to place API calls.");


            String responseJson;

            String requestUri = apiUrl + path;
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(requestUri);
            
            // Note: An app might need to switch from Authorization header to X-ApplicationId when moving from sandbox to production
            // Just switch the two lines if that's needed
            request.Headers[HttpRequestHeader.Authorization] = "Bearer " + appId;
            //request.Headers["X-ApplicationId"] = appId;

            request.Method = "POST";
            request.ContentType = "application/json";

            ASCIIEncoding encoding = new ASCIIEncoding();
            byte[] body = encoding.GetBytes(postData);
            Stream reqStream = request.GetRequestStream();
            reqStream.Write(body, 0, body.Length);

            HttpWebResponse response = (HttpWebResponse)request.GetResponse();

            StreamReader reader = new StreamReader(response.GetResponseStream());
            responseJson = reader.ReadToEnd();
            reader.Close();
            debug = responseJson;

            // let's convert the returned JSON string into an object for easier inspection
            var definition = new { status = 0, message = new Object(), payload = new Object() };
            return JsonConvert.DeserializeAnonymousType(responseJson, definition);
        }
    }
}

//Copyright 2015 Lexicum

//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at

//    http://www.apache.org/licenses/LICENSE-2.0

//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.
